{"ast":null,"code":"import _defineProperty from \"/home/rafal/Desktop/ecommerce-react/unikas-dev-shop/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const addItemToCart = (cartItems, cartItemToAdd) => {\n  const existedItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n  if (existedItem) {\n    return cartItems.map(item => item.id === cartItemToAdd.id ? _objectSpread({}, item, {\n      quantity: item.quantity + 1\n    }) : item);\n  } else {\n    return cartItemToAdd;\n  }\n};","map":{"version":3,"sources":["/home/rafal/Desktop/ecommerce-react/unikas-dev-shop/src/redux/cart/cartUtils.js"],"names":["addItemToCart","cartItems","cartItemToAdd","existedItem","find","cartItem","id","map","item","quantity"],"mappings":";;;;;;AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAWC,aAAX,KAA6B;AACtD,QAAMC,WAAW,GAAGF,SAAS,CAACG,IAAV,CAAeC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,aAAa,CAACI,EAAzD,CAApB;;AAEA,MAAGH,WAAH,EAAe;AACX,WAAOF,SAAS,CAACM,GAAV,CAAcC,IAAI,IACrBA,IAAI,CAACF,EAAL,KAAYJ,aAAa,CAACI,EAA1B,qBACIE,IADJ;AACSC,MAAAA,QAAQ,EAACD,IAAI,CAACC,QAAL,GAAgB;AADlC,SACuCD,IAFpC,CAAP;AAIH,GALD,MAKK;AACD,WAAON,aAAP;AACH;AACJ,CAXM","sourcesContent":["export const addItemToCart = (cartItems,cartItemToAdd) => {\n    const existedItem = cartItems.find(cartItem => cartItem.id === cartItemToAdd.id);\n\n    if(existedItem){\n        return cartItems.map(item => \n            item.id === cartItemToAdd.id ?\n            {...item,quantity:item.quantity + 1} : item\n            )\n    }else{\n        return cartItemToAdd\n    }\n}"]},"metadata":{},"sourceType":"module"}