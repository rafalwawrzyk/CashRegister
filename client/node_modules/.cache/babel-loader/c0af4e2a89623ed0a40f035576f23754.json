{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_SHOP_DATA_FROM_DB, ShopActionsTypesAsync } from './shopActionTypes';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils'; // function to make async code from firebase\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('i am fired');\n\n  try {\n    const collectionRef = firestore.collection('shop');\n    const snapshot = yield collectionRef.get();\n    const collectionFromDb = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(ShopActionsTypesAsync.FETCH_COLLECTIONS_SUCCESS(collectionFromDb));\n  } catch (err) {\n    yield put(ShopActionsTypesAsync.FETCH_COLLECTIONS_FAILURE(err));\n  }\n} // run the action to run fetching (take every runs function after gets action)\n// in this case it will be action: FETCH_COLLECTION_START\n\nexport function* fetchCollectionsStartSaga() {\n  yield takeEvery(ShopActionsTypesAsync.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n} // const collectionRef = firestore.collection('shop');\n// collectionRef\n//     .get()\n//     .then((snapshot) => {\n//         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n//         dispatch(fetchCollectionSuccess(collectionsFromDb))\n//     })\n//     .catch(error => {\n//         return dispatch(fetchCollectionFailure(error.message))\n//     })","map":{"version":3,"sources":["/home/rafal/Desktop/ecommerce-react-advanced (redux-saga)/unikas-dev-shop/src/redux/shop/shopSagas.js"],"names":["takeEvery","call","put","GET_SHOP_DATA_FROM_DB","ShopActionsTypesAsync","firestore","convertCollectionsSnapshotToMap","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionFromDb","FETCH_COLLECTIONS_SUCCESS","err","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartSaga","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,IAAlB,EAAuBC,GAAvB,QAAiC,oBAAjC;AACA,SAAQC,qBAAR,EAA+BC,qBAA/B,QAA2D,mBAA3D;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD,C,CAGA;;AACA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AACA,MAAG;AACC,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,MAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,gBAAgB,GAAG,MAAMb,IAAI,CAACK,+BAAD,EAAkCM,QAAlC,CAAnC;AACA,UAAMV,GAAG,CAACE,qBAAqB,CAACW,yBAAtB,CAAgDD,gBAAhD,CAAD,CAAT;AACH,GALD,CAKC,OAAME,GAAN,EAAU;AACP,UAAMd,GAAG,CAACE,qBAAqB,CAACa,yBAAtB,CAAgDD,GAAhD,CAAD,CAAT;AACH;AACJ,C,CAID;AACA;;AAEA,OAAO,UAAUE,yBAAV,GAAqC;AACxC,QAAMlB,SAAS,CACXI,qBAAqB,CAACe,uBADX,EAEXZ,qBAFW,CAAf;AAIH,C,CAYG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {takeEvery,call,put} from 'redux-saga/effects'\nimport {GET_SHOP_DATA_FROM_DB, ShopActionsTypesAsync} from './shopActionTypes'\n\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\n\n\n// function to make async code from firebase\nexport function* fetchCollectionsAsync(){\n    yield console.log('i am fired')\n    try{\n        const collectionRef = firestore.collection('shop');\n        const snapshot = yield collectionRef.get()\n        const collectionFromDb = yield call(convertCollectionsSnapshotToMap, snapshot);\n        yield put(ShopActionsTypesAsync.FETCH_COLLECTIONS_SUCCESS(collectionFromDb))\n    }catch(err){\n        yield put(ShopActionsTypesAsync.FETCH_COLLECTIONS_FAILURE(err))\n    }\n}\n\n\n\n// run the action to run fetching (take every runs function after gets action)\n// in this case it will be action: FETCH_COLLECTION_START\n\nexport function* fetchCollectionsStartSaga(){\n    yield takeEvery(\n        ShopActionsTypesAsync.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n    // const collectionRef = firestore.collection('shop');\n    // collectionRef\n    //     .get()\n    //     .then((snapshot) => {\n    //         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n    //         dispatch(fetchCollectionSuccess(collectionsFromDb))\n    //     })\n    //     .catch(error => {\n    //         return dispatch(fetchCollectionFailure(error.message))\n    //     })"]},"metadata":{},"sourceType":"module"}