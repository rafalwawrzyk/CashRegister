{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { GET_SHOP_DATA_FROM_DB, ShopActionsTypesAsync } from './shopActionTypes';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shopActions'; // function to make async code from firebase\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('i am fired');\n\n  try {\n    const collectionRef = firestore.collection('shop');\n    const snapshot = yield collectionRef.get();\n    const collectionFromDb = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionFromDb));\n  } catch (err) {\n    yield put(fetchCollectionFailure(err.message));\n  }\n} // const collectionRef = firestore.collection('shop');\n// dispatch(fetchCollectionsStart())\n// collectionRef\n//     .get()\n//     .then((snapshot) => {\n//         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n//         dispatch(fetchCollectionSuccess(collectionsFromDb))\n//     })\n//     .catch(error => {\n//         return dispatch(fetchCollectionFailure(error.message))\n//     })\n// run the action to run fetching (take every runs function after gets action)\n// in this case it will be action: FETCH_COLLECTION_START\n\nexport function* onfetchCollectionsStartSaga() {\n  yield takeEvery(ShopActionsTypesAsync.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n} // const collectionRef = firestore.collection('shop');\n// collectionRef\n//     .get()\n//     .then((snapshot) => {\n//         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n//         dispatch(fetchCollectionSuccess(collectionsFromDb))\n//     })\n//     .catch(error => {\n//         return dispatch(fetchCollectionFailure(error.message))\n//     })","map":{"version":3,"sources":["/home/rafal/Desktop/ecommerce-react-advanced (redux-saga)/unikas-dev-shop/src/redux/shop/shopSagas.js"],"names":["takeEvery","call","put","GET_SHOP_DATA_FROM_DB","ShopActionsTypesAsync","firestore","convertCollectionsSnapshotToMap","fetchCollectionSuccess","fetchCollectionFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionFromDb","err","message","onfetchCollectionsStartSaga","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,IAAlB,EAAuBC,GAAvB,QAAiC,oBAAjC;AACA,SAAQC,qBAAR,EAA+BC,qBAA/B,QAA2D,mBAA3D;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AACA,SACIC,sBADJ,EAEIC,sBAFJ,QAGO,eAHP,C,CAKA;;AACA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AACA,MAAG;AACC,UAAMC,aAAa,GAAGP,SAAS,CAACQ,UAAV,CAAqB,MAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,gBAAgB,GAAG,MAAMf,IAAI,CAACK,+BAAD,EAAkCQ,QAAlC,CAAnC;AACA,UAAMZ,GAAG,CAACK,sBAAsB,CAACS,gBAAD,CAAvB,CAAT;AACH,GALD,CAKC,OAAMC,GAAN,EAAU;AACP,UAAMf,GAAG,CAACM,sBAAsB,CAACS,GAAG,CAACC,OAAL,CAAvB,CAAT;AACH;AACJ,C,CAGO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGR;AACA;;AAEA,OAAO,UAAUC,2BAAV,GAAuC;AAC1C,QAAMnB,SAAS,CACXI,qBAAqB,CAACgB,uBADX,EAEXX,qBAFW,CAAf;AAIH,C,CAYG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {takeEvery,call,put} from 'redux-saga/effects'\nimport {GET_SHOP_DATA_FROM_DB, ShopActionsTypesAsync} from './shopActionTypes'\n\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\nimport {\n    fetchCollectionSuccess,\n    fetchCollectionFailure\n} from './shopActions'\n\n// function to make async code from firebase\nexport function* fetchCollectionsAsync(){\n    yield console.log('i am fired')\n    try{\n        const collectionRef = firestore.collection('shop');\n        const snapshot = yield collectionRef.get()\n        const collectionFromDb = yield call(convertCollectionsSnapshotToMap, snapshot);\n        yield put(fetchCollectionSuccess(collectionFromDb))\n    }catch(err){\n        yield put(fetchCollectionFailure(err.message))\n    }\n}\n\n\n        // const collectionRef = firestore.collection('shop');\n        // dispatch(fetchCollectionsStart())\n        // collectionRef\n        //     .get()\n        //     .then((snapshot) => {\n        //         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n        //         dispatch(fetchCollectionSuccess(collectionsFromDb))\n        //     })\n        //     .catch(error => {\n        //         return dispatch(fetchCollectionFailure(error.message))\n        //     })\n\n\n// run the action to run fetching (take every runs function after gets action)\n// in this case it will be action: FETCH_COLLECTION_START\n\nexport function* onfetchCollectionsStartSaga(){\n    yield takeEvery(\n        ShopActionsTypesAsync.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n    // const collectionRef = firestore.collection('shop');\n    // collectionRef\n    //     .get()\n    //     .then((snapshot) => {\n    //         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n    //         dispatch(fetchCollectionSuccess(collectionsFromDb))\n    //     })\n    //     .catch(error => {\n    //         return dispatch(fetchCollectionFailure(error.message))\n    //     })"]},"metadata":{},"sourceType":"module"}