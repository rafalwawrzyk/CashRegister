{"ast":null,"code":"import { takeEvery, call, put, all } from 'redux-saga/effects';\nimport { ShopActionsTypesAsync } from './shopActionTypes';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shopActions'; // function to make async code from firebase\n\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection('shop');\n    const snapshot = yield collectionRef.get();\n    const collectionFromDb = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionSuccess(collectionFromDb));\n  } catch (err) {\n    yield put(fetchCollectionFailure(err.message));\n  }\n} // run the action to run fetching (take every runs function after gets action)\n// in this case it will be action: FETCH_COLLECTION_START\n\nexport function* onfetchCollectionsStartSaga() {\n  yield takeEvery(ShopActionsTypesAsync.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(onfetchCollectionsStartSaga)]);\n} // const collectionRef = firestore.collection('shop');\n// collectionRef\n//     .get()\n//     .then((snapshot) => {\n//         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n//         dispatch(fetchCollectionSuccess(collectionsFromDb))\n//     })\n//     .catch(error => {\n//         return dispatch(fetchCollectionFailure(error.message))\n//     })","map":{"version":3,"sources":["/home/rafal/Desktop/ecommerce-react-advanced (redux-saga)/unikas-dev-shop/client/src/redux/shop/shopSagas.js"],"names":["takeEvery","call","put","all","ShopActionsTypesAsync","firestore","convertCollectionsSnapshotToMap","fetchCollectionSuccess","fetchCollectionFailure","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionFromDb","err","message","onfetchCollectionsStartSaga","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,IAAlB,EAAuBC,GAAvB,EAA2BC,GAA3B,QAAqC,oBAArC;AACA,SAASC,qBAAT,QAAqC,mBAArC;AAEA,SAAQC,SAAR,EAAmBC,+BAAnB,QAAyD,+BAAzD;AAEA,SACIC,sBADJ,EAEIC,sBAFJ,QAGO,eAHP,C,CAKA;;AACA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,MAAG;AACC,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,MAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,gBAAgB,GAAG,MAAMb,IAAI,CAACK,+BAAD,EAAkCM,QAAlC,CAAnC;AACA,UAAMV,GAAG,CAACK,sBAAsB,CAACO,gBAAD,CAAvB,CAAT;AACH,GALD,CAKC,OAAMC,GAAN,EAAU;AACP,UAAMb,GAAG,CAACM,sBAAsB,CAACO,GAAG,CAACC,OAAL,CAAvB,CAAT;AACH;AACJ,C,CAGD;AACA;;AAEA,OAAO,UAAUC,2BAAV,GAAuC;AAC1C,QAAMjB,SAAS,CACXI,qBAAqB,CAACc,uBADX,EAEXT,qBAFW,CAAf;AAIH;AAID,OAAO,UAAUU,SAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,2BAAD,CADE,CAAD,CAAT;AAGH,C,CAWG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {takeEvery,call,put,all} from 'redux-saga/effects'\nimport { ShopActionsTypesAsync} from './shopActionTypes'\n\nimport {firestore, convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils'\n\nimport {\n    fetchCollectionSuccess,\n    fetchCollectionFailure\n} from './shopActions'\n\n// function to make async code from firebase\nexport function* fetchCollectionsAsync(){\n    try{\n        const collectionRef = firestore.collection('shop');\n        const snapshot = yield collectionRef.get()\n        const collectionFromDb = yield call(convertCollectionsSnapshotToMap, snapshot);\n        yield put(fetchCollectionSuccess(collectionFromDb))\n    }catch(err){\n        yield put(fetchCollectionFailure(err.message))\n    }\n}\n\n\n// run the action to run fetching (take every runs function after gets action)\n// in this case it will be action: FETCH_COLLECTION_START\n\nexport function* onfetchCollectionsStartSaga(){\n    yield takeEvery(\n        ShopActionsTypesAsync.FETCH_COLLECTIONS_START,\n        fetchCollectionsAsync\n    )\n}\n\n\n\nexport function* shopSagas(){\n    yield all([\n        call(onfetchCollectionsStartSaga)\n    ])\n}\n\n\n\n\n\n\n\n\n\n\n    // const collectionRef = firestore.collection('shop');\n    // collectionRef\n    //     .get()\n    //     .then((snapshot) => {\n    //         const collectionsFromDb = convertCollectionsSnapshotToMap(snapshot);\n    //         dispatch(fetchCollectionSuccess(collectionsFromDb))\n    //     })\n    //     .catch(error => {\n    //         return dispatch(fetchCollectionFailure(error.message))\n    //     })"]},"metadata":{},"sourceType":"module"}