{"ast":null,"code":"import _slicedToArray from \"/home/rafal/Desktop/ecommerce-react-advanced (redux-saga)/unikas-dev-shop/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rafal/Desktop/ecommerce-react-advanced (redux-saga)/unikas-dev-shop/src/components/signin/signin.jsx\";\nimport React, { Component } from 'react';\nimport { StyledWrapper, FormTitle, FormSubTitle, SignInForm, ButtonsWrapper } from './styles';\nimport Input from '../formInput/formInput';\nimport CustomButton from '../customButton/customButton';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/userActions';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\n\nconst SignIn = props => {\n  // constructor(){\n  // \tsuper();\n  // \tthis.state = {\n  // \t\temail:'',\n  // \t\tpassword:''\n  // \t}\n  // }\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setUserCredentials = _useState2[1];\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const email = userCredentials.email,\n          password = userCredentials.password;\n    const emailSignInStart = props.emailSignInStart;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = e => {\n    setUserCredentials({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const googleSignInStart = this.props.googleSignInStart;\n  return React.createElement(StyledWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(FormTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(FormSubTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(SignInForm, {\n    onSubmit: this.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(Input, {\n    name: \"email\",\n    type: \"email\",\n    value: userCredentials.email,\n    handleChange: handleChange,\n    label: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), React.createElement(Input, {\n    name: \"password\",\n    type: \"password\",\n    wider: true,\n    value: userCredentials.password,\n    handleChange: handleChange,\n    label: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(ButtonsWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, \"Sign In\"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Sign In With Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["/home/rafal/Desktop/ecommerce-react-advanced (redux-saga)/unikas-dev-shop/src/components/signin/signin.jsx"],"names":["React","Component","StyledWrapper","FormTitle","FormSubTitle","SignInForm","ButtonsWrapper","Input","CustomButton","googleSignInStart","emailSignInStart","connect","useState","SignIn","props","email","password","userCredentials","setUserCredentials","handleSubmit","e","preventDefault","handleChange","target","name","value","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { StyledWrapper,FormTitle,FormSubTitle,SignInForm,ButtonsWrapper } from './styles';\nimport Input from '../formInput/formInput'\nimport CustomButton from '../customButton/customButton'\n\nimport {googleSignInStart, emailSignInStart} from '../../redux/user/userActions'\nimport {connect} from 'react-redux'\nimport {useState} from 'react'\n\nconst SignIn = (props) => {\n\t// constructor(){\n\t// \tsuper();\n\t// \tthis.state = {\n\t// \t\temail:'',\n\t// \t\tpassword:''\n\t// \t}\n\t// }\n\n\tconst [userCredentials,setUserCredentials] = useState({email:'', password:''})\n\n\n\tconst handleSubmit = async (e) => {\n\t\te.preventDefault();\n\t\tconst {email,password} = userCredentials;\n\t\tconst {emailSignInStart} = props;\t\t\n\t\temailSignInStart(email,password)\n\t};\n\n\tconst handleChange = (e) => {\n\t\tsetUserCredentials({\n\t\t\t[e.target.name]: e.target.value\n\t\t});\n\t};\n\n\tconst {googleSignInStart} = this.props;\n\treturn (\n\t\t<StyledWrapper>\n\t\t\t<FormTitle>I already have an account</FormTitle>\n\t\t\t<FormSubTitle>Sign in with your email and password</FormSubTitle>\n\n\t\t\t<SignInForm onSubmit={this.handleSubmit}>\n        <Input \n          name=\"email\" \n          type=\"email\" \n          value={userCredentials.email} \n          handleChange={handleChange} \n          label=\"email\"/>\n        <Input \n          name=\"password\" \n          type=\"password\" \n          wider \n          value={userCredentials.password} \n          handleChange={handleChange} \n          label=\"password\"/>\n        <ButtonsWrapper>\n          <CustomButton type=\"submit\">Sign In</CustomButton>\n          <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn={true}>Sign In With Google</CustomButton>\n        </ButtonsWrapper>\n\t\t\t</SignInForm>\n\t\t</StyledWrapper>\n\t);\n}\n\n\n\n\n\tconst mapDispatchToProps = (dispatch) => ({\n\t\tgoogleSignInStart: () => dispatch(googleSignInStart()),\n\t\temailSignInStart: (email, password) => dispatch(emailSignInStart({email,password}))\n\t})\n\n\nexport default connect(null,mapDispatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}